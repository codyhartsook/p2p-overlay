// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PeersClient is the client API for Peers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeersClient interface {
	RegisterPeer(ctx context.Context, in *RegisterPeersRequest, opts ...grpc.CallOption) (*RegisterPeersResponse, error)
	UnregisterPeer(ctx context.Context, in *UnregisterPeersRequest, opts ...grpc.CallOption) (*UnregisterPeersResponse, error)
}

type peersClient struct {
	cc grpc.ClientConnInterface
}

func NewPeersClient(cc grpc.ClientConnInterface) PeersClient {
	return &peersClient{cc}
}

func (c *peersClient) RegisterPeer(ctx context.Context, in *RegisterPeersRequest, opts ...grpc.CallOption) (*RegisterPeersResponse, error) {
	out := new(RegisterPeersResponse)
	err := c.cc.Invoke(ctx, "/Peers/RegisterPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peersClient) UnregisterPeer(ctx context.Context, in *UnregisterPeersRequest, opts ...grpc.CallOption) (*UnregisterPeersResponse, error) {
	out := new(UnregisterPeersResponse)
	err := c.cc.Invoke(ctx, "/Peers/UnregisterPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeersServer is the server API for Peers service.
// All implementations must embed UnimplementedPeersServer
// for forward compatibility
type PeersServer interface {
	RegisterPeer(context.Context, *RegisterPeersRequest) (*RegisterPeersResponse, error)
	UnregisterPeer(context.Context, *UnregisterPeersRequest) (*UnregisterPeersResponse, error)
	mustEmbedUnimplementedPeersServer()
}

// UnimplementedPeersServer must be embedded to have forward compatible implementations.
type UnimplementedPeersServer struct {
}

func (UnimplementedPeersServer) RegisterPeer(context.Context, *RegisterPeersRequest) (*RegisterPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPeer not implemented")
}
func (UnimplementedPeersServer) UnregisterPeer(context.Context, *UnregisterPeersRequest) (*UnregisterPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterPeer not implemented")
}
func (UnimplementedPeersServer) mustEmbedUnimplementedPeersServer() {}

// UnsafePeersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeersServer will
// result in compilation errors.
type UnsafePeersServer interface {
	mustEmbedUnimplementedPeersServer()
}

func RegisterPeersServer(s grpc.ServiceRegistrar, srv PeersServer) {
	s.RegisterService(&Peers_ServiceDesc, srv)
}

func _Peers_RegisterPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeersServer).RegisterPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Peers/RegisterPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeersServer).RegisterPeer(ctx, req.(*RegisterPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peers_UnregisterPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeersServer).UnregisterPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Peers/UnregisterPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeersServer).UnregisterPeer(ctx, req.(*UnregisterPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Peers_ServiceDesc is the grpc.ServiceDesc for Peers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Peers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Peers",
	HandlerType: (*PeersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPeer",
			Handler:    _Peers_RegisterPeer_Handler,
		},
		{
			MethodName: "UnregisterPeer",
			Handler:    _Peers_UnregisterPeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/registry.proto",
}
